/// <reference types="request" />
/// <reference types="bluebird" />
/// <reference types="node" />
/**
 * Houses of the Oireachtas Open Data APIs
 * The Houses of the Oireachtas is providing these APIs to allow our datasets to be retrieved and reused as widely as possible. They are intended to be used in conjunction with https://data.oireachtas.ie, from where our datasets can be accessed directly. By using the APIs, users can make metadata queries to identify the specific data they require. New data are available through the API as soon as they are published.  Currently, https://data.oireachtas.ie contains data in XML format from the Official Report of the Houses of the Oireachtas (the \"debates\") and replies to Parliamentary Questions in XML files complying with the [Akoma Ntoso](http://akomantoso.org) schema, as well data in PDF format for Bills, Acts and other documents published by the Houses of the Oireachtas.  Files can be retrieved from https://data.oireachtas.ie by adding the URI fragment contained in the \"formats\" fields of the JSON documents returned by these APIs. At the moment only PDF and XML files are available directly from https://data.oireachtas.ie, but this will become the endpoint for direct access of all \"uri\" fields in the data queried through https://api.oireachtas.ie. We will also be making bulk downloads available through https://data.oireachtas.ie.  Please note the APIs are a work in progress. We are working on expanding the range of datasets we publish, and we are interested in hearing about how to make these APIs more useful and wide ranging. For these reasons, we welcome any feedback, suggestions and user stories to open.data@oireachtas.ie  Data published through these APIs are made available under the [Oireachtas (Open Data) PSI Licence](https://beta.oireachtas.ie/en/open-data/license/)
 *
 * OpenAPI spec version: 1.0
 * Contact: open.data@oireachtas.ie
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import request = require('request');
import http = require('http');
import Promise = require('bluebird');
export declare class Act {
    'uri': string;
    'actYear': string;
    'actNo': string;
    'longTitleEn': string;
    'shortTitleEn': string;
    'dateSigned': string;
    'statutebookURI': string;
    'shortTitleGa': string;
    'longTitleGa': string;
}
export declare class AmendmentList {
    'stage': InlineResponse200BillOriginHouse;
    'date': string;
    'showAs': string;
    'stageNo': string;
    'formats': AmendmentlistFormats;
    'chamber': InlineResponse200BillOriginHouse;
}
export declare class AmendmentlistFormats {
    'pdf': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
    'xml': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
}
export declare class Debate {
    'debateSectionId': string;
    'date': string;
    'showAs': string;
    'uri': string;
    'chamber': InlineResponse200BillOriginHouse;
}
export declare class DebateFormats {
    'pdf': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
    'xml': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
}
export declare class DebateSpeaker {
    'memberCode': string;
    'showAs': string;
    'uri': string;
    'role': DebateSpeakerRole;
}
export declare class DebateSpeakerRole {
    'showAs': string;
    'uri': string;
    'roleCode': string;
    'roleType': DebateSpeakerRole.RoleTypeEnum;
}
export declare namespace DebateSpeakerRole {
    enum RoleTypeEnum {
        Office,
        Position,
        Minister,
        MinisterState,
    }
}
export declare class DebateText {
    'speaker': DebateSpeaker;
    'textType': DebateText.TextTypeEnum;
    'text': string;
}
export declare namespace DebateText {
    enum TextTypeEnum {
        Heading,
        Speech,
        Question,
        Table,
        Summary,
    }
}
export declare class ErrorResponse {
    'message': string;
}
export declare class Event {
    'showAs': string;
    'progressStage': number;
    'house': EventHouse;
    'dates': Array<EventDates>;
    'uri': string;
    'chamber': EventChamber;
}
export declare class EventChamber {
    'uri': string;
    'showAs': string;
}
export declare class EventDates {
    'date': string;
}
export declare class EventHouse {
    'showAs': string;
    'houseNo': string;
    'houseCode': EventHouse.HouseCodeEnum;
    'chamberCode': EventHouse.ChamberCodeEnum;
    'chamberType': EventHouse.ChamberTypeEnum;
    'uri': string;
}
export declare namespace EventHouse {
    enum HouseCodeEnum {
        Dail,
        Seanad,
    }
    enum ChamberCodeEnum {
        Dail,
        Seanad,
    }
    enum ChamberTypeEnum {
        House,
        Committee,
    }
}
export declare class Formats {
    'pdf': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
    'xml': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
}
export declare class Head {
    'counts': any;
    'dateRange': HeadDateRange;
    'lang': Head.LangEnum;
}
export declare namespace Head {
    enum LangEnum {
        En,
        Ga,
        Mul,
    }
}
export declare class HeadDateRange {
    'start': Date;
    'end': Date;
}
export declare class InlineResponse200 {
    'head': Head;
    'results': Array<InlineResponse200Results>;
}
export declare class InlineResponse2001 {
    'head': Head;
    'results': Array<InlineResponse2001Results>;
}
export declare class InlineResponse2001Question {
    'questionNumber': number;
    'uri': string;
    'questionType': InlineResponse2001Question.QuestionTypeEnum;
    'by': InlineResponse2001QuestionBy;
    'date': string;
    'debateSection': InlineResponse2001QuestionDebateSection;
    'showAs': string;
    'answerText': string;
    'to': InlineResponse2001QuestionTo;
}
export declare namespace InlineResponse2001Question {
    enum QuestionTypeEnum {
        Oral,
        Written,
    }
}
export declare class InlineResponse2001QuestionBy {
    'showAs': string;
    'uri': string;
    'memberCode': string;
}
export declare class InlineResponse2001QuestionDebateSection {
    'debateSectionId': string;
    'showAs': string;
    'uri': string;
    'formats': InlineResponse2001QuestionDebateSectionFormats;
}
export declare class InlineResponse2001QuestionDebateSectionFormats {
    'pdf': InlineResponse2001QuestionDebateSectionFormatsPdf;
    'xml': InlineResponse2001QuestionDebateSectionFormatsXml;
}
export declare class InlineResponse2001QuestionDebateSectionFormatsPdf {
    'uri': string;
}
export declare class InlineResponse2001QuestionDebateSectionFormatsXml {
    'uri': string;
}
export declare class InlineResponse2001QuestionTo {
    'showAs': string;
    'uri': string;
    'roleType': InlineResponse2001QuestionTo.RoleTypeEnum;
    'roleCode': string;
}
export declare namespace InlineResponse2001QuestionTo {
    enum RoleTypeEnum {
        Office,
        Minister,
    }
}
export declare class InlineResponse2001Results {
    'question': InlineResponse2001Question;
}
export declare class InlineResponse2002 {
    'head': Head;
    'results': Array<InlineResponse2002Results>;
}
export declare class InlineResponse2002DebateRecord {
    'lastUpdated': Date;
    'chamber': InlineResponse2002DebateRecordChamber;
    'house': InlineResponse2002DebateRecordHouse;
    'counts': InlineResponse2002DebateRecordCounts;
    'uri': string;
    'formats': DebateFormats;
    'debateSections': Array<InlineResponse2002DebateRecordDebateSections>;
    'date': string;
}
export declare class InlineResponse2002DebateRecordChamber {
    'showAs': string;
    'uri': InlineResponse2002DebateRecordChamber.UriEnum;
}
export declare namespace InlineResponse2002DebateRecordChamber {
    enum UriEnum {
        Housedail,
        Houseseanad,
        Committee,
    }
}
export declare class InlineResponse2002DebateRecordCounts {
    'debateSectionCount': number;
    'contributorCount': number;
    'divisionCount': number;
    'questionCount': number;
    'billCount': number;
}
export declare class InlineResponse2002DebateRecordDebateSection {
    'text': Array<DebateText>;
    'showAs': string;
    'debateType': string;
    'counts': InlineResponse2002DebateRecordDebateSectionCounts;
    'speakers': Array<InlineResponse2002DebateRecordDebateSectionSpeakers>;
    'bill': InlineResponse2002DebateRecordDebateSectionBill;
    'containsDebate': boolean;
    'uri': string;
    'debateSectionId': string;
    'formats': InlineResponse2002DebateRecordDebateSectionFormats;
    'parentDebateSection': InlineResponse2002DebateRecordDebateSectionParentDebateSection;
}
export declare class InlineResponse2002DebateRecordDebateSectionBill {
    'uri': string;
    'event': InlineResponse2002DebateRecordDebateSectionBillEvent;
}
export declare class InlineResponse2002DebateRecordDebateSectionBillEvent {
    'showAs': string;
    'uri': string;
    'stage': string;
    'motionType': string;
    'houseCode': string;
    'isBillStage': boolean;
}
export declare class InlineResponse2002DebateRecordDebateSectionCounts {
    'speechCount': number;
    'speakerCount': number;
}
export declare class InlineResponse2002DebateRecordDebateSectionFormats {
    'pdf': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
    'xml': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
}
export declare class InlineResponse2002DebateRecordDebateSectionFormatsPdf {
    'uri': string;
}
export declare class InlineResponse2002DebateRecordDebateSectionParentDebateSection {
    'showAs': string;
    'uri': string;
    'formats': InlineResponse2002DebateRecordDebateSectionFormats;
    'debateSectionId': string;
}
export declare class InlineResponse2002DebateRecordDebateSectionSpeakers {
    'speaker': DebateSpeaker;
}
export declare class InlineResponse2002DebateRecordDebateSections {
    'debateSection': InlineResponse2002DebateRecordDebateSection;
}
export declare class InlineResponse2002DebateRecordHouse {
    'uri': string;
    'houseNo': string;
    'showAs': string;
    'houseCode': InlineResponse2002DebateRecordHouse.HouseCodeEnum;
    'committeeCode': string;
    'chamberType': InlineResponse2002DebateRecordHouse.ChamberTypeEnum;
}
export declare namespace InlineResponse2002DebateRecordHouse {
    enum HouseCodeEnum {
        Dail,
        Seanad,
    }
    enum ChamberTypeEnum {
        House,
        Committee,
    }
}
export declare class InlineResponse2002Results {
    'debateRecord': InlineResponse2002DebateRecord;
}
export declare class InlineResponse2003 {
    'head': Head;
    'results': Array<InlineResponse2003Results>;
}
export declare class InlineResponse2003Division {
    'isBill': boolean;
    'debate': InlineResponse2003DivisionDebate;
    'voteId': string;
    'datetime': Date;
    'tallies': InlineResponse2003DivisionTallies;
    'chamber': InlineResponse200BillOriginHouse;
    'category': string;
    'subject': InlineResponse200BillOriginHouse;
    'uri': string;
    'outcome': string;
    'tellers': string;
    'house': InlineResponse2003DivisionHouse;
    'date': string;
}
export declare class InlineResponse2003DivisionDebate {
    'showAs': string;
    'uri': string;
    'formats': InlineResponse2003DivisionDebateFormats;
    'debateSection': string;
}
export declare class InlineResponse2003DivisionDebateFormats {
    'pdf': InlineResponse2003DivisionDebateFormatsPdf;
    'xml': InlineResponse2003DivisionDebateFormatsXml;
}
export declare class InlineResponse2003DivisionDebateFormatsPdf {
    'uri': string;
}
export declare class InlineResponse2003DivisionDebateFormatsXml {
    'uri': string;
}
export declare class InlineResponse2003DivisionHouse {
    'uri': string;
    'houseNo': string;
    'houseCode': string;
    'chamberType': string;
    'showAs': string;
    'committeeCode': string;
}
export declare class InlineResponse2003DivisionTallies {
    'nilVotes': MemberTally;
    'taVotes': MemberTally;
    'staonVotes': MemberTally;
}
export declare class InlineResponse2003Results {
    'division': InlineResponse2003Division;
}
export declare class InlineResponse200Bill {
    'debates': Array<Debate>;
    'sponsors': Array<Sponsor>;
    'lastUpdated': Date;
    'longTitleEn': string;
    'longTitleGa': string;
    'originHouse': InlineResponse200BillOriginHouse;
    'shortTitleEn': string;
    'shortTitleGa': string;
    'status': InlineResponse200Bill.StatusEnum;
    'billType': InlineResponse200Bill.BillTypeEnum;
    'events': Array<Event>;
    'mostRecentStage': InlineResponse200BillMostRecentStage;
    'uri': string;
    'act': Act;
    'amendmentLists': Array<InlineResponse200BillAmendmentLists>;
    'billYear': string;
    'relatedDocs': Array<RelatedDoc>;
    'billNo': string;
    'stages': Array<InlineResponse200BillMostRecentStage>;
    'method': string;
    'source': string;
    'versions': Array<InlineResponse200BillVersions>;
}
export declare namespace InlineResponse200Bill {
    enum StatusEnum {
        Defeated,
        Enacted,
        Lapsed,
        Current,
        Withdrawn,
        Rejected,
    }
    enum BillTypeEnum {
        Public,
        Private,
        Hybrid,
    }
}
export declare class InlineResponse200BillAmendmentLists {
    'amendmentList': AmendmentList;
}
export declare class InlineResponse200BillMostRecentStage {
    'event': Event;
}
export declare class InlineResponse200BillOriginHouse {
    'showAs': string;
    'uri': string;
}
export declare class InlineResponse200BillVersion {
    'date': string;
    'formats': VersionFormats;
    'text': string;
    'lang': InlineResponse200BillVersion.LangEnum;
    'showAs': string;
    'uri': string;
}
export declare namespace InlineResponse200BillVersion {
    enum LangEnum {
        Eng,
        Gle,
    }
}
export declare class InlineResponse200BillVersions {
    'version': InlineResponse200BillVersion;
}
export declare class InlineResponse200Results {
    'bill': InlineResponse200Bill;
}
export declare class MemberTally {
    'tally': number;
    'showAs': string;
    'members': Array<MemberTallyMembers>;
}
export declare class MemberTallyMember {
    'showAs': string;
    'memberCode': string;
    'uri': string;
}
export declare class MemberTallyMembers {
    'member': MemberTallyMember;
}
export declare class RelatedDoc {
    'date': string;
    'formats': Formats;
    'showAs': string;
    'uri': string;
    'docType': string;
}
export declare class Sponsor {
    'sponsor': SponsorSponsor;
}
export declare class SponsorSponsor {
    'by': InlineResponse200BillOriginHouse;
    'as': InlineResponse200BillOriginHouse;
}
export declare class VersionFormats {
    'pdf': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
    'xml': InlineResponse2002DebateRecordDebateSectionFormatsPdf;
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: request.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: request.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: request.Options): void;
}
export declare enum ConstituenciesApiApiKeys {
}
export declare class ConstituenciesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ConstituenciesApiApiKeys, value: string): void;
    /**
     * Returns list of constituencies filtered by the base and additional parameters. The list supports paging.  #### Mapping * Start Date - Greater Than or Equal To - question.date * End Date - Less Than or Equal To - question.date * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records * House/Chamber - house.house.uri
     * @summary Constituencies List
     * @param chamberId Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32
     * @param chamber Filter by House name (dail or seanad). Using an empty string retrieves results for both Houses.
     * @param houseNo filter by house number
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     */
    constituencies(chamberId?: Array<string>, chamber?: string, houseNo?: number, skip?: number, limit?: number): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum DebatesApiApiKeys {
}
export declare class DebatesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DebatesApiApiKeys, value: string): void;
    /**
     * Returns list of debates filtered by the base and additional parameters. The list supports paging. #### Mapping * Start Date - Greater Than or Equal To - debateRecord.date * End Date - Less Than or Equal To - debateRecord.date * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records
     * @summary Debates List
     * @param chamberType Filter results by House, ie, Dáil or Seanad or committees.
     * @param chamberId Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32
     * @param chamber Filter by House name (dail or seanad). Using an empty string retrieves results for both Houses.
     * @param dateStart This is a base filter which is used on many APIs, allowing filtering by Start Date related to the Section.
     * @param dateEnd This is a base filter which is used on many APIs, allowing filtering by End Date related to the Section.
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     * @param memberId Filter by Member uri.
     * @param debateId Filter by debate uri
     */
    debates(chamberType?: string, chamberId?: Array<string>, chamber?: string, dateStart?: Date, dateEnd?: Date, skip?: number, limit?: number, memberId?: string, debateId?: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2002;
    }>;
}
export declare enum DivisionsApiApiKeys {
}
export declare class DivisionsApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DivisionsApiApiKeys, value: string): void;
    /**
     * This will return a list of divisions which meet certain criteria #### Indexes * division_meta  #### Mapping * Division outcome - Equal To - division.outcome * Start Date - Greater than or Equal To - division.date * End Date - Greater than or Equal To - division.date
     * @summary Divisions
     * @param chamberType Filter results by House, ie, Dáil or Seanad or committees.
     * @param chamberId Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32
     * @param chamber Filter by House name (dail or seanad). Using an empty string retrieves results for both Houses.
     * @param dateStart This is a base filter which is used on many APIs, allowing filtering by Start Date related to the Section.
     * @param dateEnd This is a base filter which is used on many APIs, allowing filtering by End Date related to the Section.
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     * @param outcome Filter divisions by outcome
     * @param memberId Filter by Member uri.
     * @param debateId Filter by debate uri
     * @param voteId Division Identifier for a Single Division
     */
    divisions(chamberType?: string, chamberId?: Array<string>, chamber?: string, dateStart?: Date, dateEnd?: Date, skip?: number, limit?: number, outcome?: Array<string>, memberId?: string, debateId?: string, voteId?: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2003;
    }>;
}
export declare enum HousesApiApiKeys {
}
export declare class HousesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: HousesApiApiKeys, value: string): void;
    /**
     * Returns a house. #### Indexes * houses  #### Mapping * House ID - Equal To - house.houseCode
     * @summary Houses
     * @param chamberId Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32
     * @param chamber Filter by House name (dail or seanad). Using an empty string retrieves results for both Houses.
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     */
    houses(chamberId?: Array<string>, chamber?: string, skip?: number, limit?: number): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum LegislationApiApiKeys {
}
export declare class LegislationApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: LegislationApiApiKeys, value: string): void;
    /**
     * Returns list of bills filtered by the base and additional parameters. The list supports paging. #### Indexes * billsbook_meta  #### Mapping * Start Date - Greater Than or Equal To - bill.mostRecentStage.event.dates.date * End Date - Less Than or Equal To - bill.mostRecentStage.event.dates.date * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records * Status - Equal To - bill.status * Source - Equal To - bill.source *
     * @summary Legislation API
     * @param billStatus An array which is used to filter legislation by status detailed in default settings below.  Separated by comma.
     * @param billSource An array used to filter legislation by origin source.
     * @param dateStart This is a base filter which is used on many APIs, allowing filtering by Start Date related to the Section.
     * @param dateEnd This is a base filter which is used on many APIs, allowing filtering by End Date related to the Section.
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     * @param memberId Filter by Member uri.
     * @param billId Filter results by Bill URI Example   /ie/oireachtas/bill/2016/2
     * @param billNo Filter Bill by number.
     * @param billYear Filter Bill by year.
     * @param chamberId Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32
     * @param actYear Filter Bill by Act year.
     * @param actNo Filter Bill by Act number.
     * @param lang language of document to extract. Defaults to English (en)
     */
    legislation(billStatus?: Array<string>, billSource?: Array<string>, dateStart?: Date, dateEnd?: Date, skip?: number, limit?: number, memberId?: string, billId?: string, billNo?: string, billYear?: string, chamberId?: Array<string>, actYear?: string, actNo?: string, lang?: string): Promise<{
        response: http.ClientResponse;
        body: InlineResponse200;
    }>;
}
export declare enum PartiesApiApiKeys {
}
export declare class PartiesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: PartiesApiApiKeys, value: string): void;
    /**
     * Returns list of parties filtered by the base and additional parameters. The list supports paging. #### Mapping * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records * House/Chamber - house.house.uri
     * @summary Parties List
     * @param chamberId Filter by house or committee uri. Example  /ie/oireachtas/house/dail/32
     * @param chamber Filter by House name (dail or seanad). Using an empty string retrieves results for both Houses.
     * @param houseNo filter by house number
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     */
    parties(chamberId?: Array<string>, chamber?: string, houseNo?: number, skip?: number, limit?: number): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
export declare enum QuestionsApiApiKeys {
}
export declare class QuestionsApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        'default': Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: QuestionsApiApiKeys, value: string): void;
    /**
     * Returns list of questions filtered by the base and additional parameters. The list supports paging. #### Mapping * Start Date - Greater Than or Equal To - question.date * End Date - Less Than or Equal To - question.date * Skip - Equal To - this will ignore the first x number of records set in the parameter * Limit - Equal To - this will only return a specific amount of records * Question Type - question.questionType
     * @summary Questions Filtered by Type Only
     * @param dateStart This is a base filter which is used on many APIs, allowing filtering by Start Date related to the Section.
     * @param dateEnd This is a base filter which is used on many APIs, allowing filtering by End Date related to the Section.
     * @param skip This is a base filter which is used on many APIs, allowing skipping of records by a specific integer.
     * @param limit This is a base filter which is used on many APIs, allowing the limiting of records to a specific integer.
     * @param qtype Filter questions by oral or writtens.
     * @param memberId Filter by Member uri.
     * @param questionId Identifier for a Single Question
     * @param questionNo Filter by question No.
     */
    questions(dateStart?: Date, dateEnd?: Date, skip?: number, limit?: number, qtype?: Array<string>, memberId?: string, questionId?: string, questionNo?: number): Promise<{
        response: http.ClientResponse;
        body: InlineResponse2001;
    }>;
}
